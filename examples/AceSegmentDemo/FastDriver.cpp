// This file was generated by the following script:
//   /home/brian/dev/AceSegment/utils/fast_driver.py --digit_pins 12 14 15 16 --segment_pins 4 5 6 7 8 9 10 11 --class_name FastDriver --output_files
//
// DO NOT EDIT

#include <stdint.h>
#include <Arduino.h>
#include <digitalWriteFast.h>
#include "FastDriver.h"

const uint8_t FastDriver::kSegmentPins[] = {
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
};

const uint8_t FastDriver::kDigitPins[] = {
  12,
  14,
  15,
  16,
};

const FastDriver::DigitalWriter FastDriver::kSegmentWriters[] = {
  digitalWriteFastSegment00Low,
  digitalWriteFastSegment00High,
  digitalWriteFastSegment01Low,
  digitalWriteFastSegment01High,
  digitalWriteFastSegment02Low,
  digitalWriteFastSegment02High,
  digitalWriteFastSegment03Low,
  digitalWriteFastSegment03High,
  digitalWriteFastSegment04Low,
  digitalWriteFastSegment04High,
  digitalWriteFastSegment05Low,
  digitalWriteFastSegment05High,
  digitalWriteFastSegment06Low,
  digitalWriteFastSegment06High,
  digitalWriteFastSegment07Low,
  digitalWriteFastSegment07High,
};

const FastDriver::DigitalWriter FastDriver::kDigitWriters[] = {
  digitalWriteFastDigit00Low,
  digitalWriteFastDigit00High,
  digitalWriteFastDigit01Low,
  digitalWriteFastDigit01High,
  digitalWriteFastDigit02Low,
  digitalWriteFastDigit02High,
  digitalWriteFastDigit03Low,
  digitalWriteFastDigit03High,
};

void FastDriver::configure() {
  for (uint8_t digit = 0; digit < mNumDigits; digit++) {
    uint8_t groupPin = kDigitPins[digit];
    pinMode(groupPin, OUTPUT);
    disableDigit(digit);
  }

  for (uint8_t segment = 0; segment < kNumSegments; segment++) {
    uint8_t elementPin = kSegmentPins[segment];
    pinMode(elementPin, OUTPUT);
    writeSegment(segment, kSegmentOff);
  }

  ace_segment::ModulatingDigitDriver::configure();
}

void FastDriver::displayCurrentField() {
  ace_segment::DimmingDigit& dimmingDigit = mDimmingDigits[mCurrentDigit];
  uint8_t brightness = dimmingDigit.brightness;
  if (mCurrentDigit != mPrevDigit) {
    disableDigit(mPrevDigit);
    mIsCurrentDigitOn = false;
    mCurrentSubFieldMax = ((uint16_t) mNumSubFields * brightness) / 256;
  }

  if (brightness < 255 && mCurrentSubField >= mCurrentSubFieldMax) {
    if (mIsCurrentDigitOn) {
      disableDigit(mCurrentDigit);
      mIsCurrentDigitOn = false;
    }
  } else {
    if (!mIsCurrentDigitOn) {
      SegmentPatternType segmentPattern = dimmingDigit.pattern;
      if (segmentPattern != mSegmentPattern) {
        drawSegments(segmentPattern);
        mSegmentPattern = segmentPattern;
      }
      enableDigit(mCurrentDigit);
      mIsCurrentDigitOn = true;
    }
  }

  mCurrentSubField++;
  mPrevDigit = mCurrentDigit;
  if (mCurrentSubField >= mNumSubFields) {
    ace_segment::Util::incrementMod(mCurrentDigit, mNumDigits);
    mCurrentSubField = 0;
  }
}
