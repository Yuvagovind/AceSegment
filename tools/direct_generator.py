# Copyright 2018 Brian T. Park
#
# MIT License
"""
Generate a version of ModulatingDigitDriver using digitalWriteFast()
assuming a directing wiring of LED display to the microcontroller pins.
"""

import logging


class DriverGenerator:
    HEADER_FILE = """\
// This file was generated by the following script:
//   {invocation}
//
// DO NOT EDIT

#include <stdint.h>
#include <digitalWriteFast.h>
#include <ace_segment/ModulatingDigitDriver.h>
#include <ace_segment/Util.h>

#ifndef ACE_SEGMENT_{class_name}_H
#define ACE_SEGMENT_{class_name}_H

class {class_name}: public ace_segment::ModulatingDigitDriver {{
  public:
    // Constructor
    {class_name}(ace_segment::DimmablePattern* dimmablePatterns,
            uint8_t numDigits, uint8_t numSubFields):
        ace_segment::ModulatingDigitDriver(
            nullptr /* ledMatrix */, dimmablePatterns, numDigits, numSubFields)
    {{}}

    // Destructor
    virtual ~{class_name}() override {{}}

    virtual void configure() override;
    virtual void displayCurrentField() override;
    virtual void prepareToSleep() override;

  private:
    typedef void (*DigitalWriter)(void);

    static const uint8_t kNumSegments = {num_segments};

    // define pin values depending on common cathode or anode wiring
    {on_off_constants}

    static const uint8_t kSegmentPins[];
    static const uint8_t kDigitPins[];
    static const DigitalWriter kSegmentWriters[];
    static const DigitalWriter kDigitWriters[];

    static void disableDigit(uint8_t digit) {{
      uint8_t index = digit * 2 + kDigitOff;
      DigitalWriter writer = kDigitWriters[index];
      writer();
    }}

    static void enableDigit(uint8_t digit) {{
      uint8_t index = digit * 2 + kDigitOn;
      DigitalWriter writer = kDigitWriters[index];
      writer();
    }}

    static void writeSegment(uint8_t segment, uint8_t value) {{
      uint8_t index = segment * 2 + value;
      DigitalWriter writer = kSegmentWriters[index];
      writer();
    }}

    static void drawSegments(uint8_t pattern);

    // DigitalWriter functions for writing segment pins.
    {segment_writers}

    // DigitalWriter functions for writing digit pins.
    {digit_writers}
}};

#endif
"""

    SOURCE_FILE = """\
// This file was generated by the following script:
//   {invocation}
//
// DO NOT EDIT

#include <stdint.h>
#include <Arduino.h>
#include <digitalWriteFast.h>
#include "{class_name}.h"

const uint8_t {class_name}::kSegmentPins[] = {{
  {segment_pins}
}};

const uint8_t {class_name}::kDigitPins[] = {{
  {digit_pins}
}};

const {class_name}::DigitalWriter {class_name}::kSegmentWriters[] = {{
  {segment_writers}
}};

const {class_name}::DigitalWriter {class_name}::kDigitWriters[] = {{
  {digit_writers}
}};

void {class_name}::configure() {{
  for (uint8_t digit = 0; digit < mNumDigits; digit++) {{
    uint8_t groupPin = kDigitPins[digit];
    pinMode(groupPin, OUTPUT);
    disableDigit(digit);
  }}

  for (uint8_t segment = 0; segment < kNumSegments; segment++) {{
    uint8_t elementPin = kSegmentPins[segment];
    pinMode(elementPin, OUTPUT);
    writeSegment(segment, kSegmentOff);
  }}

  ace_segment::ModulatingDigitDriver::configure();
}}

void {class_name}::displayCurrentField() {{
  if (mPreparedToSleep) return;

  bool isCurrentDigitOn;
  ace_segment::DimmablePattern& dimmablePattern =
      mDimmablePatterns[mCurrentDigit];
  uint8_t brightness = dimmablePattern.brightness;
  if (mCurrentDigit != mPrevDigit) {{
    disableDigit(mPrevDigit);
    isCurrentDigitOn = false;
    mCurrentSubFieldMax = ((uint16_t) mNumSubFields * brightness) / 256;
  }} else {{
    isCurrentDigitOn = mIsPrevDigitOn;
  }}

  if (brightness < 255 && mCurrentSubField >= mCurrentSubFieldMax) {{
    if (isCurrentDigitOn) {{
      disableDigit(mCurrentDigit);
      isCurrentDigitOn = false;
    }}
  }} else {{
    if (!isCurrentDigitOn) {{
      SegmentPatternType segmentPattern = dimmablePattern.pattern;
      if (segmentPattern != mSegmentPattern) {{
        drawSegments(segmentPattern);
        mSegmentPattern = segmentPattern;
      }}
      enableDigit(mCurrentDigit);
      isCurrentDigitOn = true;
    }}
  }}

  mCurrentSubField++;
  mPrevDigit = mCurrentDigit;
  mIsPrevDigitOn = isCurrentDigitOn;
  if (mCurrentSubField >= mNumSubFields) {{
    ace_segment::Util::incrementMod(mCurrentDigit, mNumDigits);
    mCurrentSubField = 0;
  }}
}}

void {class_name}::drawSegments(uint8_t pattern) {{
  uint8_t elementMask = 0x1;
  for (uint8_t segment = 0; segment < kNumSegments; segment++) {{
    uint8_t output = (pattern & elementMask) ? kSegmentOn : kSegmentOff;
    writeSegment(segment, output);
    elementMask <<= 1;
  }}
}}

void {class_name}::prepareToSleep() {{
  Driver::prepareToSleep();
  disableDigit(mPrevDigit);
}}
"""

    def __init__(self, invocation, class_name, segment_pins, digit_pins,
                 common_cathode, use_transistor_drivers, output_header,
                 output_source, output_files, digital_write_fast):
        self.invocation = invocation
        self.class_name = class_name
        self.segment_pins = segment_pins
        self.digit_pins = digit_pins
        self.common_cathode = common_cathode
        self.use_transistor_drivers = use_transistor_drivers
        self.output_header = output_header
        self.output_source = output_source
        self.output_files = output_files
        self.digital_write_fast = digital_write_fast
        logging.info("invocation: %s", self.invocation)
        logging.info("class_name: %s", self.class_name)
        logging.info("segment_pins: %s", self.segment_pins)
        logging.info("digit_pins: %s", self.digit_pins)
        logging.info("common_cathode: %s", self.common_cathode)
        logging.info("use_transistor_drivers: %s", self.use_transistor_drivers)
        logging.info("digital_write_fast: %s", self.digital_write_fast)

    def run(self):
        header = self.HEADER_FILE.format(
            invocation=self.invocation,
            class_name=self.class_name,
            num_segments=len(self.segment_pins),
            on_off_constants=self.get_on_off_constants(),
            segment_writers=self.get_segment_writers(),
            digit_writers=self.get_digit_writers())
        if self.output_header:
            print(header)
        if self.output_files:
            header_filename = self.class_name + ".h"
            with open(header_filename, 'w', encoding='utf-8') as header_file:
                print(header, end='', file=header_file)
            logging.info("Created %s", header_filename)

        source = self.SOURCE_FILE.format(
            invocation=self.invocation,
            class_name=self.class_name,
            segment_pins=self.get_segment_pins_array(),
            digit_pins=self.get_digit_pins_array(),
            segment_writers=self.get_segment_writers_array(),
            digit_writers=self.get_digit_writers_array())
        if self.output_source:
            print(source)
        if self.output_files:
            source_filename = self.class_name + ".cpp"
            with open(source_filename, 'w', encoding='utf-8') as source_file:
                print(source, end='', file=source_file)
            logging.info("Created %s", source_filename)

    def get_segment_pins_array(self):
        entries = []
        for pin in self.segment_pins:
            entry = ('%s,' % (pin))
            entries.append(entry)
        return '\n  '.join(entries)

    def get_digit_pins_array(self):
        entries = []
        for pin in self.digit_pins:
            entry = ('%s,' % (pin))
            entries.append(entry)
        return '\n  '.join(entries)

    def get_segment_writers(self):
        writers = []
        if self.digital_write_fast:
            method = 'digitalWriteFast'
        else:
            method = 'digitalWrite'
        for i in range(len(self.segment_pins)):
            pin = self.segment_pins[i]
            low = ('static void digitalWriteFastSegment%02dLow() ' +
                   '{ %s(%s, LOW); }') % (i, method, pin)
            high = ('static void digitalWriteFastSegment%02dHigh() ' +
                    '{ %s(%s, HIGH); }') % (i, method, pin)
            writers.append(low)
            writers.append(high)
        return '\n    '.join(writers)

    def get_segment_writers_array(self):
        entries = []
        for i in range(len(self.segment_pins)):
            low = ('digitalWriteFastSegment%02dLow,' % (i))
            high = ('digitalWriteFastSegment%02dHigh,' % (i))
            entries.append(low)
            entries.append(high)
        return '\n  '.join(entries)

    def get_digit_writers(self):
        writers = []
        if self.digital_write_fast:
            method = 'digitalWriteFast'
        else:
            method = 'digitalWrite'
        for i in range(len(self.digit_pins)):
            pin = self.digit_pins[i]
            low = ('static void digitalWriteFastDigit%02dLow() ' +
                   '{ %s(%s, LOW); }') % (i, method, pin)
            high = ('static void digitalWriteFastDigit%02dHigh() ' +
                    '{ %s(%s, HIGH); }') % (i, method, pin)
            writers.append(low)
            writers.append(high)
        return '\n    '.join(writers)

    def get_digit_writers_array(self):
        entries = []
        for i in range(len(self.digit_pins)):
            low = ('digitalWriteFastDigit%02dLow,' % (i))
            high = ('digitalWriteFastDigit%02dHigh,' % (i))
            entries.append(low)
            entries.append(high)
        return '\n  '.join(entries)

    def get_on_off_constants(self):
        if self.common_cathode:
            digit_on = 'LOW'
            digit_off = 'HIGH'
            segment_on = 'HIGH'
            segment_off = 'LOW'
        else:
            digit_on = 'HIGH'
            digit_off = 'LOW'
            segment_on = 'LOW'
            segment_off = 'HIGH'

        if self.use_transistor_drivers:
            digit_on, digit_off = digit_off, digit_on

        constants = []
        constants.append('static const uint8_t kDigitOn = %s;' % (digit_on))
        constants.append('static const uint8_t kDigitOff = %s;' % (digit_off))
        constants.append('static const uint8_t kSegmentOn = %s;' %
                         (segment_on))
        constants.append('static const uint8_t kSegmentOff = %s;' %
                         (segment_off))
        return '\n    '.join(constants)
